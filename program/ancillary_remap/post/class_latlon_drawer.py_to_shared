#!/usr/bin/env python
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap


class class_latlon_drawer:

  def __init__(self, ngrids, title='None', maptype=0):

    if ngrids < 1 or ngrids > 5:
      print 'maximum ngrids is 4'
      quit()
    self.type     = maptype
    self.title    = title
    self.ngrids   = ngrids
    self.igrid    = -1
    self.size     = [0  for i in range(ngrids)] # [ngrids]
    self.lons     = [[] for i in range(ngrids)] # [ncols x ngrids]
    self.lats     = [[] for i in range(ngrids)] # [ncols x ngrids]
    self.nvars    = 0
    self.ndims    = []   # [nvars]
    self.varnames = []   # [nvars]
    self.vmin     = []   # [nvars]
    self.vmax     = []   # [nvars]
    self.vars     = [[] for i in range(ngrids)] #[nvars x ngrids]
#    self.ivar     = [-1 for i in range(ngrids)]

    self.xmin     =   0.0
    self.xmax     = 360.0
    self.ymin     = -90.0
    self.ymax     =  90.0
    self.lon0     = 127.0
    self.lat0     = 37.30
    self.res      = 'c'    # resolution: c<l<i<h<f




  def add_grid(self, lons, lats):
    ig         = self.igrid + 1
    self.igrid = ig
    if self.igrid > self.ngrids-1:
      print 'check number of grids..'
      quit()
    if len(lons) != len(lats):
      print 'check the size of lons and lats...'

    #print 'minlons = ', min(lons)
    #print 'maxlons = ', max(lons)
    #print 'minlats = ', min(lats)
    #print 'maxlats = ', max(lats)

    self.size[ig] = len(lons)
    self.lons[ig] = lons
    self.lats[ig] = lats




  def check_grid(self):
    if self.igrid != self.ngrids-1:
      print 'check number of grids..', self.igrid, self.ngrids




  def add_variable(self, varname, vars):

    # check ngrids
    if len(vars) != self.ngrids:
      print 'check number of vars in add_variable...'
      quit()

    # check ndims
    if self.ngrids == 1:
      ndims = self.get_dimension(vars[0])
    elif self.ngrids > 1:
      ndims = [0 for i in range(self.ngrids)]
      for ig in range(self.ngrids):
        ndims[ig] = self.get_dimension(vars[ig])
      if self.ngrids != ndims.count(ndims[0]):
        print 'check ndims ', ndims
      ndims = ndims[0]

    self.nvars = self.nvars + 1
    self.ndims.append(ndims)
    self.varnames.append(varname)
    self.vmin.append(min(vars[0]))
    self.vmax.append(max(vars[0]))

    # add variable
    for ig in range(self.ngrids):
      ncol  = self.get_dimensionSize(ndims, vars[ig])
      #print ncol, len(vars[ig]), self.size[ig]

      if ncol != self.size[ig]:
        print 'check dimension size of variable'
        quit()

      self.vars[ig].append(vars[ig])





  def get_dimension(self, var):
    ndim = 0
  
    if isinstance(var, list):
      ndim = 1
    else:
      return ndim
  
    if isinstance(var[0], list):
      ndim = 2
    else:
      return ndim
  
    if isinstance(var[0][0], list):
      ndim = 3
    else:
      return ndim
  
    if isinstance(var[0][0][0], list):
      ndim = 4
    else:
      return ndim
  
    if isinstance(var[0][0][0][0], list):
      ndim = 5
    else:
      return ndim

    return ndim





  def get_dimensionSize(self, ndims, var):
  
    if ndims == 0:
      print 'variable is scalar..'
      quit()
    elif ndims == 1:
      ncol = len(var[:]) 
    elif ndims == 2:
      ncol = len(var[0][:]) 
    elif ndims == 3:
      ncol = len(var[0][0][:]) 
    elif ndims == 4:
      ncol = len(var[0][0][0][:]) 
    elif ndims == 5:
      ncol = len(var[0][0][0][0][:]) 

    return ncol






  def axis_initialize(self, axis, xmin_in, xmax_in, ymin_in, ymax_in):
     axis.set_xlim(xmin_in,xmax_in)
     axis.set_ylim(ymin_in,ymax_in)






  def axis_initialize_no(self, axis):
     axis.clear()
     axis.set_frame_on(False)
     #axis.set_xlim(xmin_in,xmax_in)
     #axis.set_ylim(ymin_in,ymax_in)
     axis.set_yticklabels([])
     axis.set_xticklabels([])
     axis.set_yticks([])
     axis.set_xticks([])





  def draw(self):

    if self.type == 0:
      margin = 0.05     # 0.05 ~ 0.95 (for labels)
      #wspace = 2*margin
      #hspace = 0.01
      wspace = margin*0.8
      hspace = 0.12
    elif self.type == 1 or self.type == 2:
      margin = 0.06     # 0.05 ~ 0.95 (for labels)
      wspace = 0.0
      hspace = margin*1.2
    else:
      print 'unknown type..', self.type
      quit()

    ngrids = self.ngrids
    nvars  = self.nvars

    pltfig = plt.figure(figsize=(6.5*ngrids,5*nvars))
    pltfig.clear()
    pltfig.suptitle(self.title,fontsize=18,y=1-margin+0.02) # default y = 0.98
    pltfig.subplots_adjust(left=margin, bottom=margin, right=1.0-margin, top=1.0-1.5*margin, wspace=wspace, hspace=hspace)

    # Grids
    for ig in range(ngrids):
      axis = pltfig.add_subplot(nvars+1, ngrids, ig+1)
      axis.set_title('grid')
      self.draw_templete(axis)
      self.draw_grid(axis, ig)

    # Fields
    for ig in range(ngrids):
      for iv in range(nvars):
        axis = pltfig.add_subplot(nvars+1, ngrids, ngrids+iv*ngrids+ig+1)
        axis.set_title(self.varnames[iv])
        self.draw_templete(axis)
        self.draw_field(axis, ig, iv)

    pltfig.savefig('./test.png')




  def draw_templete(self, axis):

    if self.type==0:
      map = Basemap(projection='cyl', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=0, urcrnrlon=360, resolution=self.res)
    elif self.type==1:
      #map = Basemap(projection='ortho',lon_0=self.lon0,lat_0=self.lat0,resolution=self.res)                           # seoul
      map = Basemap(projection='ortho',lon_0=self.lon0,lat_0=-90,resolution=self.res)                           # seoul
    elif self.type==2:
      map = Basemap(width=12000000,height=9000000,projection='lcc',lat_1=self.lat0-4.0,lat_2=self.lat0+4.0,lat_0=self.lat0,lon_0=self.lon0,resolution=self.res)
 
    # draw coastlines, country boundaries, fill continents.
    map.drawcountries(linewidth=0.8)
    map.drawcoastlines(linewidth=0.8)
    
    # draw color for land  <= not use, because it remove field's color
    #map.fillcontinents(color='coral',lake_color='aqua')
    #map.fillcontinents(color='white',lake_color='white')
    
    # draw color for ocean
    #map.drawmapboundary(fill_color='aqua')
    map.drawmapboundary(fill_color='white')
    
    # draw lat/lon grid lines every 30 degrees. (labels=[left,right,top,down], default labelstyle = '+/-')
    if self.type==1:
      map.drawmeridians(np.arange(0,360,45),  labels=[False,False,False,False])
      map.drawparallels(np.arange(-90,90,45), labels=[False,False,False,False])
    else:
      map.drawmeridians(np.arange(0,360,45),  labels=[False,False,False,False])
      map.drawparallels(np.arange(-90,90,45), labels=[True,False,False,False])

    return map



  def draw_grid(self, axis, ig):
 
    map   = self.draw_templete(axis)
    x, y  = map(self.lons[ig], self.lats[ig])
    axis.scatter(x, y, color='r', s=0.1)


  def draw_field(self, axis, ig, ivar):
 
    map  = self.draw_templete(axis)
    x, y = map(self.lons[ig], self.lats[ig])  # lats, lons must be numpy array
    im   = map.pcolor(x, y, self.vars[ig][ivar], vmin=self.vmin[ivar], vmax=self.vmax[ivar], shading='flat', cmap=plt.cm.jet, tri=True)



  def show(self):
    plt.show()
