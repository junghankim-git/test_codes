./codes/Bndry.F90  is file
line    =  !-------------------------------------------------------------------------------
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !>
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !> @brief
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !>  - bndry module.
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !>
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !> @date ?????2012
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !>  - JH KIM  : First written from the HOMME and was modified for KIAPSGM framework.
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !> @date 30JAN2015
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !>  - JH KIM  : Added to "ghost_exchangeV" subroutine. (CAM-SE 5.3)
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !-------------------------------------------------------------------------------
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  #include "KIM.h"
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  module Bndry
type    =  1
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  use KiapsBase, only : int_kind => KIM_INT_KIND, real_kind => KIM_REAL8_KIND, log_kind => KIM_LOG_KIND
type    =  3
types   =  [0, 1, 3]
intents =  [0, 0, 1]
ctype   =  3
cintent =  1
 
line    =  !USE KiapsParallel, ONLY : iam
type    =  -3
types   =  [0, 1, 3]
intents =  [0, 0, 1]
ctype   =  3
cintent =  1
 
line    =  use KiapsParallel
type    =  3
types   =  [0, 1, 3]
intents =  [0, 0, 1]
ctype   =  3
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 3]
intents =  [0, 0, 1]
ctype   =  3
cintent =  1
 
line    =  private
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: bndry_exchangeV, ghost_exchangeVfull, compute_ghost_corner_orientation
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: ghost_exchangeV, ghost_exchangev3d
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: ghost_exchangeV_new
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  interface bndry_exchangeV
type    =  5
types   =  [0, 1, 3, 4, 5]
intents =  [0, 0, 1, 1, 1]
ctype   =  5
cintent =  1
 
line    =  module procedure bndry_exchangeV_nonth
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  module procedure long_bndry_exchangeV_nonth
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  module procedure bndry_exchangeV_thsave
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  end interface
type    =  -1
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  contains
type    =  -1
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  subroutine bndry_exchangeV_nonth(par, buffer)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 0, 1]
ctype   =  2
cintent =  1
 
line    =  use Edge, only : Edgebuffer_t
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 0, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Scheduler, only : schedule_t, cycle_t, schedule, status, srequest, rrequest, status, srequest, rrequest
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 0, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParallel, only : parallel_t, AbortPar, OMP_IN_PARALLEL, PAR_SUCCESS, PAR_STATUS_SIZE, PAR_DOUBLE_PRECISION, PAR_REAL8
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 0, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParMPI, only : Par_Isend, Par_Irecv, Par_AllWait, Par_Wait, nReqs
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 0, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(parallel_t) :: par
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(EdgeBuffer_t) :: buffer
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Schedule_t), pointer :: pSchedule
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Cycle_t), pointer :: pCycle
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: dest, length, tag
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: icycle, ierr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: iptr, source, nlyr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nSendCycles, nRecvCycles
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: errorcode, errorlen
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  character *(80) errorstring
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  logical(kind = log_kind), parameter :: Debug = .false.
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #ifdef _MPI
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(omp_in_parallel()) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 0, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  print *, 'bndry_exchangeV : Warning you are calling a non - thread safe'
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 0, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  print *, ' routine inside a threaded region.... '
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 0, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  print *, ' Results are not predictable!! '
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 0, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! Setup the pointer to proper Schedule
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #ifdef _PREDICT
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  pSchedule => Schedule(iam)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #else
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pSchedule => Schedule(1)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nlyr = buffer%nlyr
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nSendCycles = pSchedule%nSendCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nRecvCycles = pSchedule%nRecvCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Fire off the sends
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nSendCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 0, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%SendCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  dest = pCycle%dest - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * pCycle%lengthP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !DBG if(Debug) print *,'bndry_exchangeV: MPI_Isend: DEST:',dest,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Isend(buffer%buf(1, iptr), length, dest, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !       call MPI_Isend(buffer%buf(1,iptr),length,PAR_REAL8,dest,tag,par%comm,Srequest(icycle),ierr)
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 0, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Isend : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Post the Receives
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 0, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  source = pCycle%source - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * pCycle%lengthP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !DBG if(Debug) print *,'bndry_exchangeV: MPI_Irecv: SRC:',source,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Irecv(buffer%receive(1, iptr), length, source, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !       call MPI_Irecv(buffer%receive(1,iptr),length,PAR_REAL8, &
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !            source,tag,par%comm,Rrequest(icycle),ierr)
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 0, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Irecv : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Wait for all the receives to complete
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  call Par_AllWait()
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !    CALL Par_Wait()
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !    call MPI_Waitall(nSendCycles,Srequest,status,ierr)
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !    call MPI_Waitall(nRecvCycles,Rrequest,status,ierr)
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 0, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = pCycle%lengthP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  do i = 0, length - 1
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 0, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  buffer%buf(1 : nlyr, iptr + i) = buffer%receive(1 : nlyr, iptr + i)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end subroutine bndry_exchangeV_nonth
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  subroutine long_bndry_exchangeV_nonth(par, buffer)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use Edge, only : LongEdgebuffer_t
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Scheduler, only : schedule_t, cycle_t, schedule, status, srequest, rrequest, status, srequest, rrequest
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParallel, only : parallel_t, AbortPar, OMP_IN_PARALLEL, PAR_SUCCESS, PAR_STATUS_SIZE, PAR_DOUBLE_PRECISION, PAR_INTEGER
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParMPI, only : Par_Isend, Par_Irecv, Par_AllWait
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(parallel_t) :: par
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(LongEdgeBuffer_t) :: buffer
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Schedule_t), pointer :: pSchedule
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Cycle_t), pointer :: pCycle
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: dest, length, tag
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: icycle, ierr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: iptr, source, nlyr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nSendCycles, nRecvCycles
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: errorcode, errorlen
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  character *(80) errorstring
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  logical(kind = log_kind), parameter :: Debug = .false.
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #ifdef _MPI
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(omp_in_parallel()) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  print *, 'bndry_exchangeV : Warning you are calling a non - thread safe'
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  print *, ' routine inside a threaded region.... '
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  print *, ' Results are not predictable!! '
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! Setup the pointer to proper Schedule
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #ifdef _PREDICT
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  pSchedule => Schedule(iam)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #else
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pSchedule => Schedule(1)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nlyr = buffer%nlyr
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nSendCycles = pSchedule%nSendCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nRecvCycles = pSchedule%nRecvCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Fire off the sends
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nSendCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%SendCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  dest = pCycle%dest - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * pCycle%lengthP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !DBG if(Debug) print *,'bndry_exchangeV: MPI_Isend: DEST:',dest,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Isend(buffer%buf(1, iptr), length, dest, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Isend : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Post the Receives
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  source = pCycle%source - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * pCycle%lengthP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !DBG if(Debug) print *,'bndry_exchangeV: MPI_Irecv: SRC:',source,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Irecv(buffer%receive(1, iptr), length, source, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Irecv : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Wait for all the receives to complete
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  call Par_AllWait()
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = pCycle%lengthP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  do i = 0, length - 1
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  buffer%buf(1 : nlyr, iptr + i) = buffer%receive(1 : nlyr, iptr + i)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end subroutine long_bndry_exchangeV_nonth
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !********************************************************************************
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !********************************************************************************
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  subroutine bndry_exchangeV_thsave(hybrid, buffer)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    use hybrid_mod, only : hybrid_t
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use Edge, only : Edgebuffer_t
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Scheduler, only : schedule_t, cycle_t, schedule, status, srequest, rrequest, status, srequest, rrequest
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Dimensions, only : nelemd, np
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  !+isong
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  !   use perf_mod, only: t_startf, t_stopf ! _EXTERNAL
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  !-isong
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Timing, only : TimingStart, TimingStop
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParallel, only : parallel_t, hybrid_t, AbortPar, OMP_IN_PARALLEL, PAR_SUCCESS, PAR_STATUS_SIZE, PAR_DOUBLE_PRECISION
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParMPI, only : Par_Isend, Par_Irecv, Par_AllWait
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(hybrid_t) :: hybrid
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(EdgeBuffer_t) :: buffer
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Schedule_t), pointer :: pSchedule
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Cycle_t), pointer :: pCycle
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: dest, length, tag
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: icycle, ierr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: iptr, source, nlyr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nSendCycles, nRecvCycles
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: errorcode, errorlen
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  character *(80) errorstring
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i, l_ierr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  logical(kind = log_kind), parameter :: Debug = .false.
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP MASTER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !+isong
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !   call t_startf('bndry_exchange')
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !-isong
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !    l_ierr = TimingStart('bndry_exchange')
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP END MASTER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #if (! defined ELEMENT_OPENMP)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP BARRIER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(hybrid%ithr == 0) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  #ifdef _MPI
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  ! Setup the pointer to proper Schedule
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  #ifdef _PREDICT
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  pSchedule => Schedule(iam)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #else
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pSchedule => Schedule(1)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nlyr = buffer%nlyr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nSendCycles = pSchedule%nSendCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nRecvCycles = pSchedule%nRecvCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Fire off the sends
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nSendCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%SendCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  dest = pCycle%dest - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * pCycle%lengthP
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !DBG if(Debug) print *,'bndry_exchangeV: MPI_Isend: DEST:',dest,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Isend(buffer%buf(1, iptr), length, dest, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Isend : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Post the Receives
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  source = pCycle%source - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * pCycle%lengthP
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !DBG if(Debug) print *,'bndry_exchangeV: MPI_Irecv: SRC:',source,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Irecv(buffer%receive(1, iptr), length, source, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Irecv : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Wait for all the receives to complete
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  call Par_AllWait()
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = pCycle%lengthP
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  do i = 0, length - 1
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  buffer%buf(1 : nlyr, iptr + i) = buffer%receive(1 : nlyr, iptr + i)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  endif ! if(hybrid%ithr == 0)
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #if (! defined ELEMENT_OPENMP)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP BARRIER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP MASTER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !+isong
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !   call t_stopf('bndry_exchange')
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !-isong
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !    l_ierr = TimingStop('bndry_exchange')
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP END MASTER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  end subroutine bndry_exchangeV_thsave
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  subroutine ghost_exchangeVfull(hybrid, buffer, nc)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !   MT 2011:  derived from bndry_exchange, but copies an entire
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !             element of ghost cell information, including corner
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !             elements.  Requres cubed-sphere grid
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    use hybrid_mod, only : hybrid_t
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use Edge, only : Ghostbuffer_t
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Scheduler, only : schedule_t, cycle_t, schedule, status, srequest, rrequest, status, srequest, rrequest
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Dimensions, only : nelemd
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParallel, only : parallel_t, hybrid_t, AbortPar, OMP_IN_PARALLEL, PAR_SUCCESS, PAR_STATUS_SIZE, PAR_DOUBLE_PRECISION
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParMPI, only : Par_Isend, Par_Irecv, Par_AllWait
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(hybrid_t) :: hybrid
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(GhostBuffer_t) :: buffer
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nc
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Schedule_t), pointer :: pSchedule
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Cycle_t), pointer :: pCycle
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: dest, length, tag
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: icycle, ierr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: iptr, source, nlyr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nSendCycles, nRecvCycles
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: errorcode, errorlen
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  character *(80) errorstring
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i, i1, i2
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  logical(kind = log_kind), parameter :: Debug = .false.
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #if (! defined ELEMENT_OPENMP)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP BARRIER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(hybrid%ithr == 0) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  #ifdef _MPI
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  ! Setup the pointer to proper Schedule
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  #ifdef _PREDICT
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  pSchedule => Schedule(iam)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #else
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pSchedule => Schedule(1)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nlyr = buffer%nlyr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nSendCycles = pSchedule%nSendCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nRecvCycles = pSchedule%nRecvCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Fire off the sends
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nSendCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%SendCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  dest = pCycle%dest - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * pCycle%lengthP_ghost * nc * nc
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !print *,'ghost_exchangeV: MPI_Isend: DEST:',dest,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Isend(buffer%buf(1, 1, 1, iptr), length, dest, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Isend : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Post the Receives
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  source = pCycle%source - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * pCycle%lengthP_ghost * nc * nc
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !print *,'ghost_exchangeV: MPI_Irecv: SRC:',source,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Irecv(buffer%receive(1, 1, 1, iptr), length, source, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Irecv : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Wait for all the receives to complete
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  call Par_AllWait()
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = pCycle%lengthP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  do i = 0, length - 1
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  do i2 = 1, nc
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  5
cintent =  8
 
line    =  do i1 = 1, nc
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8, 10]
ctype   =  5
cintent =  10
 
line    =  buffer%buf(i1, i2, 1 : nlyr, iptr + i) = buffer%receive(i1, i2, 1 : nlyr, iptr + i)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8, 10, 12]
ctype   =  6
cintent =  12
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 10]
ctype   =  5
cintent =  10
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 10]
ctype   =  5
cintent =  10
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  endif ! if(hybrid%ithr == 0)
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #if (! defined ELEMENT_OPENMP)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP BARRIER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  end subroutine ghost_exchangeVfull
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===========================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !  GHOST_EXCHANGEV:
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !  Author: Christoph Erath
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !  derived from bndry_exchange, but copies an entire
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !             element of ghost cell information, including corner
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !             elements.  Requres cubed-sphere grid
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! =========================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  subroutine ghost_exchangeV(hybrid, buffer, nhc, npoints)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !   2011:  derived from bndry_exchange, but copies an entire
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !             element of ghost cell information, including corner
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !             elements.  Requres cubed-sphere grid
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    use hybrid_mod, only : hybrid_t
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use Edge, only : Ghostbuffertr_t
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Scheduler, only : schedule_t, cycle_t, schedule, status, srequest, rrequest, status, srequest, rrequest
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Dimensions, only : nelemd
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParallel, only : parallel_t, hybrid_t, AbortPar, OMP_IN_PARALLEL, PAR_SUCCESS, PAR_STATUS_SIZE, PAR_DOUBLE_PRECISION
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParMPI, only : Par_Isend, Par_Irecv, Par_AllWait
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(hybrid_t) :: hybrid
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(GhostBuffertr_t) :: buffer
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nhc, npoints
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Schedule_t), pointer :: pSchedule
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Cycle_t), pointer :: pCycle
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: dest, length, tag
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: icycle, ierr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: iptr, source, nlyr, ntrac
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nSendCycles, nRecvCycles
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: errorcode, errorlen
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  character *(80) errorstring
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i, i1, i2
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  logical(kind = log_kind), parameter :: Debug = .false.
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #if (! defined ELEMENT_OPENMP)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP BARRIER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(hybrid%ithr == 0) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  #ifdef _MPI
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  ! Setup the pointer to proper Schedule
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  #ifdef _PREDICT
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  pSchedule => Schedule(iam)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #else
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pSchedule => Schedule(1)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nlyr = buffer%nlyr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ntrac = buffer%ntrac
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nSendCycles = pSchedule%nSendCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nRecvCycles = pSchedule%nRecvCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Fire off the sends
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nSendCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%SendCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  dest = pCycle%dest - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * ntrac * pCycle%lengthP_ghost * nhc * npoints
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !print *,'ghost_exchangeV: MPI_Isend: DEST:',dest,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Isend(buffer%buf(1, 1, 1, 1, iptr), length, dest, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Isend : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Post the Receives
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  source = pCycle%source - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * ntrac * pCycle%lengthP_ghost * nhc * npoints
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !print *,'ghost_exchangeV: MPI_Irecv: SRC:',source,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Irecv(buffer%receive(1, 1, 1, 1, iptr), length, source, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Irecv : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Wait for all the receives to complete
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  call Par_AllWait()
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = pCycle%lengthP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  do i = 0, length - 1
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  do i2 = 1, nhc
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  5
cintent =  8
 
line    =  do i1 = 1, npoints
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8, 10]
ctype   =  5
cintent =  10
 
line    =  buffer%buf(i1, i2, 1 : nlyr, 1 : ntrac, iptr + i) = buffer%receive(i1, i2, 1 : nlyr, 1 : ntrac, iptr + i)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8, 10, 12]
ctype   =  6
cintent =  12
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 10]
ctype   =  5
cintent =  10
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 10]
ctype   =  5
cintent =  10
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  endif ! if(hybrid%ithr == 0)
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #if (! defined ELEMENT_OPENMP)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP BARRIER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  end subroutine ghost_exchangeV
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===========================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !  GHOST_EXCHANGEV:
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !  Author: Christoph Erath
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !  derived from bndry_exchange, but copies an entire
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !             element of ghost cell information, including corner
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !             elements.  Requres cubed-sphere grid
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! =========================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  subroutine ghost_exchangeV_new(hybrid, buffer, nhc, npoints, ntrac)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !   2011:  derived from bndry_exchange, but copies an entire
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !             element of ghost cell information, including corner
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !             elements.  Requres cubed-sphere grid
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use KiapsParallel, only : hybrid_t, AbortPar
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsBase, only : log_kind => KIM_LOG_KIND
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use edge, only : Ghostbuffertr_t
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use scheduler, only : schedule_t, cycle_t, schedule
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use dimensions, only : nelemd
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  #ifdef _MPI
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  !    use KiapsParallel, only : AbortPar, status, srequest, rrequest, &
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  !         mpireal_t, mpiinteger_t, mpi_success
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParMPI, only : Par_Isend, Par_Irecv, Par_AllWait
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  #else
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(hybrid_t) :: hybrid
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(GhostBuffertr_t) :: buffer
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nhc, npoints, ntrac
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Schedule_t), pointer :: pSchedule
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Cycle_t), pointer :: pCycle
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: dest, length, tag
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: icycle, ierr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: iptr, source, nlyr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nSendCycles, nRecvCycles
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: errorcode, errorlen
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  character *(80) errorstring
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i, i1, i2
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  logical(kind = log_kind), parameter :: Debug = .false.
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #if (! defined ELEMENT_OPENMP)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP BARRIER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(hybrid%ithr == 0) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  #ifdef _MPI
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  ! Setup the pointer to proper Schedule
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  #ifdef _PREDICT
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  pSchedule => Schedule(iam)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #else
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pSchedule => Schedule(1)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nlyr = buffer%nlyr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nSendCycles = pSchedule%nSendCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nRecvCycles = pSchedule%nRecvCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Fire off the sends
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nSendCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%SendCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  dest = pCycle%dest - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * ntrac * pCycle%lengthP_ghost * nhc * npoints
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !print *,'ghost_exchangeV: MPI_Isend: DEST:',dest,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !call MPI_Isend(buffer%buf(1,1,1,1,iptr),length,MPIreal_t,dest,tag,hybrid%par%comm,Srequest(icycle),ierr)
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Isend(buffer%buf(1, 1, 1, 1, iptr), length, dest, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Isend : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Post the Receives
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  source = pCycle%source - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * ntrac * pCycle%lengthP_ghost * nhc * npoints
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !print *,'ghost_exchangeV: MPI_Irecv: SRC:',source,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !call MPI_Irecv(buffer%receive(1,1,1,1,iptr),length,MPIreal_t, &
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !     source,tag,hybrid%par%comm,Rrequest(icycle),ierr)
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Irecv(buffer%receive(1, 1, 1, 1, iptr), length, source, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'bndry_exchangeV : Error after call to MPI_Irecv : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Wait for all the receives to complete
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !call MPI_Waitall(nSendCycles,Srequest,status,ierr)
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !call MPI_Waitall(nRecvCycles,Rrequest,status,ierr)
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  call Par_AllWait()
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = pCycle%lengthP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  do i = 0, length - 1
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  do i2 = 1, nhc
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  5
cintent =  8
 
line    =  do i1 = 1, npoints
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8, 10]
ctype   =  5
cintent =  10
 
line    =  buffer%buf(i1, i2, 1 : nlyr, 1 : ntrac, iptr + i) = buffer%receive(i1, i2, 1 : nlyr, 1 : ntrac, iptr + i)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8, 10, 12]
ctype   =  6
cintent =  12
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 10]
ctype   =  5
cintent =  10
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 10]
ctype   =  5
cintent =  10
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  endif ! if(hybrid%ithr == 0)
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #if (! defined ELEMENT_OPENMP)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP BARRIER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  end subroutine ghost_exchangeV_new
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===========================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !  GHOST_EXCHANGEV3d:
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !  Author: James overflet
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !  derived from bndry_exchange, but copies an entire
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !             element of ghost cell information, including corner
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !             elements.  Requres cubed-sphere grid
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! =========================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  subroutine ghost_exchangeV3d(hybrid, buffer)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !   2011:  derived from bndry_exchange, but copies an entire
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !             element of ghost cell information, including corner
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !             elements.  Requres cubed-sphere grid
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    use hybrid_mod,    only : hybrid_t
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use Edge, only : Ghostbuffer3d_t
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Scheduler, only : schedule_t, cycle_t, schedule, status, srequest, rrequest, status, srequest, rrequest
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Dimensions, only : nelemd
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParallel, only : parallel_t, hybrid_t, AbortPar, OMP_IN_PARALLEL, PAR_DOUBLE_PRECISION, PAR_SUCCESS, PAR_STATUS_SIZE, PAR_DOUBLE_PRECISION
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParMPI, only : Par_Isend, Par_Irecv, Par_AllWait
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(hybrid_t) :: hybrid
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(GhostBuffer3d_t) :: buffer
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nhc, np
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Schedule_t), pointer :: pSchedule
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(Cycle_t), pointer :: pCycle
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: dest, length, tag
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: icycle, ierr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: iptr, source, nlyr
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nSendCycles, nRecvCycles
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: errorcode, errorlen
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  character *(80) errorstring
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i, i1, i2
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  logical(kind = log_kind), parameter :: Debug = .false.
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #if (! defined ELEMENT_OPENMP)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP BARRIER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(hybrid%ithr == 0) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  #ifdef _MPI
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  ! Setup the pointer to proper Schedule
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  #ifdef _PREDICT
type    =  -3
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  pSchedule => Schedule(iam)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #else
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pSchedule => Schedule(1)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nlyr = buffer%nlyr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nhc = buffer%nhc
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  np = buffer%np
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nSendCycles = pSchedule%nSendCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nRecvCycles = pSchedule%nRecvCycles
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Fire off the sends
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nSendCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%SendCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  dest = pCycle%dest - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * pCycle%lengthP_ghost *(nhc + 1) * np
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !print *,'ghost_exchangeV3d: MPI_Isend: DEST:',dest,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Isend(buffer%buf(1, 1, 1, iptr), length, dest, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'ghost_exchangeV3d : Error after call to MPI_Isend : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Post the Receives
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  source = pCycle%source - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = nlyr * pCycle%lengthP_ghost *(nhc + 1) * np
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  tag = pCycle%tag
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  !print *,'ghost_exchangeV: MPI_Irecv: SRC:',source,'LENGTH:',length,'TAG: ',tag
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call Par_Irecv(buffer%receive(1, 1, 1, iptr), length, source, ierr = ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(ierr .ne. PAR_SUCCESS) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  errorcode = ierr
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  call MPI_Error_String(errorcode, errorstring, errorlen, ierr)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  print *, 'ghost_exchangeV3d : Error after call to MPI_Irecv : ', errorstring
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  Wait for all the receives to complete
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !==================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  call Par_AllWait()
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do icycle = 1, nRecvCycles
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  pCycle => pSchedule%RecvCycle(icycle)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  length = pCycle%lengthP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  iptr = pCycle%ptrP_ghost
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  do i = 0, length - 1
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  buffer%buf(:, :, :, iptr + i) = buffer%receive(:, :, :, iptr + i)
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  !            do i2=1,nhc
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  !               do i1=1,np
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  !                  buffer%buf(i1, i2, 1:nlyr, iptr+i) = buffer%receive(i1, i2, 1:nlyr, iptr+i)
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  !               enddo
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  !            enddo
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do ! icycle
type    =  -1
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  endif ! if(hybrid%ithr == 0)
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #if (! defined ELEMENT_OPENMP)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !$OMP BARRIER
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  #endif
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  end subroutine ghost_exchangeV3d
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  subroutine compute_ghost_corner_orientation(hybrid, elem, nets, nete)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use Dimensions, only : nelemd, np
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParallel, only : parallel_t, hybrid_t, AbortPar, BarrierPar, PAR_SUCCESS, PAR_DOUBLE_PRECISION
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Element, only : element_t
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Edge, only : ghostbuffer_t, ghostvpackfull, ghostvunpackfull, initghostbufferfull,
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  freeghostbuffer
type    =  -2
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use Control, only : north, south, east, west, neast, nwest, seast, swest
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(hybrid_t), intent(in) :: hybrid
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(element_t), intent(inout), target :: elem(:)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: nets, nete
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(ghostBuffer_t) :: ghostbuf, ghostbuf_cv
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: cin(2, 2, 1, nets : nete) !CE : cslam tracer
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: cout(- 1 : 4, - 1 : 4, 1, nets : nete) !CE : cslam tracer
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i, j, ie, kptr, np1, np2, nc, nc1, nc2, k, nlev
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  logical :: fail, fail1, fail2
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: tol = .1
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  call BarrierPar(hybrid%par)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !   if (hybrid%par%masterproc) print *,'computing ghost cell corner orientations'
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! first test on the Gauss Grid with same number of ghost cells:
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nc = 2 ! test using GLL interior points
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nc1 = - 1
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nc2 = 4
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  nlev = 1
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  call initghostbufferfull(ghostbuf_cv, nlev, nc)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do ie = nets, nete
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  cin(1, 1, 1, ie) = elem(ie)%gdofp(1, 1)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  cin(nc, nc, 1, ie) = elem(ie)%gdofp(np, np)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  cin(1, nc, 1, ie) = elem(ie)%gdofp(1, np)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  cin(nc, 1, 1, ie) = elem(ie)%gdofp(np, 1)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cout = 0
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  run ghost exchange on c array to get corner orientation
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do ie = nets, nete
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  kptr = 0
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call ghostVpackfull(ghostbuf_cv, cin(:, :, :, ie), 1, nc, nc, nlev, kptr, elem(ie)%desc)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end do
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  call ghost_exchangeVfull(hybrid, ghostbuf_cv, nc)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do ie = nets, nete
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  kptr = 0
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  call ghostVunpackfull(ghostbuf_cv, cout(:, :, :, ie), nc1, nc2, nc, nlev, kptr, elem(ie)%desc)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !       nc +--------+
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !        ^ | nw  ne |
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !     j  | |        |
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !        1 | sw  se |
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !          +--------+
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !           1 --> nc
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !              i
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! check SW corner
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do ie = nets, nete
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  fail1 = .false.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  fail2 = .false.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(elem(ie)%desc%putmapP_ghost(swest) / = - 1) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  if(abs(cout(nc1, 1, 1, ie) - cout(nc1, 0, 1, ie)) .gt. tol) fail1 = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  if(abs(cout(1, nc1, 1, ie) - cout(0, nc1, 1, ie)) .gt.tol) fail2 = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(fail1 .neqv. fail2) stop 'ghost exchange SW orientation failure'
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(fail1) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  elem(ie)%desc%reverse(swest) = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  !print *,'reversion sw orientation ie',ie
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  !print *,elem(ie)%desc%reverse(nwest),elem(ie)%desc%reverse(north),elem(ie)%desc%reverse(neast)
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  !print *,elem(ie)%desc%reverse(west),' ',elem(ie)%desc%reverse(east)
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  !print *,elem(ie)%desc%reverse(swest),elem(ie)%desc%reverse(south),elem(ie)%desc%reverse(seast)
type    =  -3
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! check SE corner
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do ie = nets, nete
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  fail1 = .false.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  fail2 = .false.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(elem(ie)%desc%putmapP_ghost(seast) / = - 1) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  if(abs(cout(nc2, 1, 1, ie) - cout(nc2, 0, 1, ie)) .gt. tol) fail1 = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  if(abs(cout(nc + 1, nc1, 1, ie) - cout(nc, nc1, 1, ie)) .gt.tol) fail2 = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(fail1 .neqv. fail2) stop 'ghost exchange SE orientation failure'
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(fail1) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  elem(ie)%desc%reverse(seast) = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! check NW corner
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do ie = nets, nete
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  fail1 = .false.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  fail2 = .false.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(elem(ie)%desc%putmapP_ghost(nwest) / = - 1) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  if(abs(cout(nc1, nc + 1, 1, ie) - cout(nc1, nc, 1, ie)) .gt. tol) fail1 = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  if(abs(cout(1, nc2, 1, ie) - cout(0, nc2, 1, ie)) .gt.tol) fail2 = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(fail1 .neqv. fail2) stop 'ghost exchange NW orientation failure'
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(fail1) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  elem(ie)%desc%reverse(nwest) = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! check NE corner
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do ie = nets, nete
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  fail1 = .false.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  fail2 = .false.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(elem(ie)%desc%putmapP_ghost(neast) / = - 1) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  if(abs(cout(nc2, nc + 1, 1, ie) - cout(nc2, nc, 1, ie)) .gt. tol) fail1 = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  if(abs(cout(nc + 1, nc2, 1, ie) - cout(nc, nc2, 1, ie)) .gt.tol) fail2 = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(fail1 .neqv. fail2) stop 'ghost exchange NE orientation failure'
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(fail1) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  elem(ie)%desc%reverse(neast) = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  enddo
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !  end ghost exchange corner orientation
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end subroutine
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  end module Bndry
type    =  -1
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
./codes/CoordinateSystems.F90  is file
line    =  #include "KIM.h"
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  module CoordinateSystems
type    =  1
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  ! WARNING:  When using this class be sure that you know if the
type    =  -3
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  ! cubic coordinates are on the unit cube or the [-\pi/4,\pi/4] cube
type    =  -3
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  ! and if the spherical longitude is in [0,2\pi] or [-\pi,\pi]
type    =  -3
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  use KiapsBase, only : int_kind => KIM_INT_KIND, real_kind => KIM_REAL8_KIND, longdouble_kind => KIM_LONGDOUBLE_KIND
type    =  3
types   =  [0, 1, 3]
intents =  [0, 0, 1]
ctype   =  3
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 3]
intents =  [0, 0, 1]
ctype   =  3
cintent =  1
 
line    =  private
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  real(kind = real_kind), public, parameter :: DIST_THRESHOLD = 1.0D - 9
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  real(kind = real_kind), parameter :: one = 1.0D0, two = 2.0D0
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  type, public :: cartesian2D_t
type    =  5
types   =  [0, 1, 3, 4, 5]
intents =  [0, 0, 1, 1, 1]
ctype   =  5
cintent =  1
 
line    =  sequence
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  real(real_kind) :: x ! x coordinate
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  real(real_kind) :: y ! y coordinate
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  end type cartesian2D_t
type    =  -1
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  type, public :: cartesian3D_t
type    =  5
types   =  [0, 1, 3, 4, 5]
intents =  [0, 0, 1, 1, 1]
ctype   =  5
cintent =  1
 
line    =  sequence
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  real(real_kind) :: x ! x coordinate
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  real(real_kind) :: y ! y coordinate
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  real(real_kind) :: z ! z coordinate
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  end type cartesian3D_t
type    =  -1
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  type, public :: spherical_polar_t
type    =  5
types   =  [0, 1, 3, 4, 5]
intents =  [0, 0, 1, 1, 1]
ctype   =  5
cintent =  1
 
line    =  sequence
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  real(real_kind) :: r ! radius
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  real(real_kind) :: lon ! longitude
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  real(real_kind) :: lat ! latitude
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  end type spherical_polar_t
type    =  -1
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  interface assignment(=)
type    =  5
types   =  [0, 1, 3, 4, 5]
intents =  [0, 0, 1, 1, 1]
ctype   =  5
cintent =  1
 
line    =  module procedure copy_cart2d
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  end interface
type    =  -1
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  interface operator(==)
type    =  5
types   =  [0, 1, 3, 4, 5]
intents =  [0, 0, 1, 1, 1]
ctype   =  5
cintent =  1
 
line    =  module procedure eq_cart2d
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  end interface
type    =  -1
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  interface distance
type    =  5
types   =  [0, 1, 3, 4, 5]
intents =  [0, 0, 1, 1, 1]
ctype   =  5
cintent =  1
 
line    =  module procedure distance_cart2D
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  module procedure distance_cart2D_v
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  module procedure distance_cart3D
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  module procedure distance_cart3D_v
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  end interface
type    =  -1
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  interface change_coordinates
type    =  5
types   =  [0, 1, 3, 4, 5]
intents =  [0, 0, 1, 1, 1]
ctype   =  5
cintent =  1
 
line    =  module procedure spherical_to_cart_v
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  module procedure spherical_to_cart
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  module procedure cart_to_spherical_v
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  module procedure cart_to_spherical
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  module procedure aray_to_spherical
type    =  4
types   =  [0, 1, 3, 4, 5, 4]
intents =  [0, 0, 1, 1, 1, 3]
ctype   =  4
cintent =  3
 
line    =  end interface
type    =  -1
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  ! we cant make this an interfaced because of real_kind=longdouble_kind,
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  ! these subroutine are the same
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  !  interface ref2sphere
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  !     module procedure ref2sphere_quad
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  !     module procedure ref2sphere_double
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  !  end interface
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  ! ==========================================
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  ! Public Interfaces
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  ! ==========================================
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: sphere_tri_area
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: surfareaxy
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: distance
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: change_coordinates
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: ref2sphere
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: ref2sphere_double
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: cart2cubedsphere
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: spherical_to_cart !CE
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  ! note: cant make these next two an interface since they only differ by return arg
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: cubedsphere2cart
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: sphere2cubedsphere
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: cube_face_number_from_cart
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: cube_face_number_from_sphere
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  ! CE
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: cart2cubedspherexy
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  public :: cart2spherical !CE
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  private :: copy_cart2d
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  private :: eq_cart2d
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  private :: distance_cart2D
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  private :: distance_cart2D_v
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  private :: distance_cart3D
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  private :: distance_cart3D_v
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  private :: spherical_to_cart_v
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  !private :: spherical_to_cart
type    =  -3
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  private :: cart_to_spherical_v
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  private :: cart_to_spherical
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  private :: aray_to_spherical
type    =  4
types   =  [0, 1, 3, 4]
intents =  [0, 0, 1, 1]
ctype   =  4
cintent =  1
 
line    =  contains
type    =  -1
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  ! ============================================
type    =  -3
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  ! copy_cart2d:
type    =  -3
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  ! Overload assignment operator for cartesian2D_t
type    =  -3
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  ! ============================================
type    =  -3
types   =  [0, 1]
intents =  [0, 0]
ctype   =  1
cintent =  0
 
line    =  subroutine copy_cart2d(cart2, cart1)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 0, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 0, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian2D_t), intent(out) :: cart2
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2D_t), intent(in) :: cart1
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  cart2%x = cart1%x
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart2%y = cart1%y
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end subroutine copy_cart2d
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ============================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! eq_cart2d:
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! Overload == operator for cartesian2D_t
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ============================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function eq_cart2d(cart2, cart1) result(is_same)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian2D_t), intent(in) :: cart2
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2D_t), intent(in) :: cart1
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  logical :: is_same
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(distance(cart1, cart2) < DIST_THRESHOLD) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  is_same = .true.
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  is_same = .false.
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  end function eq_cart2d
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===================================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! distance_cart2D  : scalar version
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! distance_cart2D_v: vector version
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! computes distance between cartesian 2D coordinates
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===================================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function distance_cart2D(cart1, cart2) result(dist)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian2D_t), intent(in) :: cart1
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2D_t), intent(in), optional :: cart2
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(real_kind) :: dist
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(present(cart2)) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  dist = sqrt((cart1%x - cart2%x) * * 2 +
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  (cart1%y - cart2%y) * * 2)
type    =  -2
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  dist = sqrt(cart1%x * cart1%x +
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart1%y * cart1%y)
type    =  -2
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  end function distance_cart2D
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function distance_cart2D_v(cart1, cart2) result(dist)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian2D_t), intent(in) :: cart1(:)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2D_t), intent(in), optional :: cart2(:)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(real_kind) :: dist(size(cart1))
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(present(cart2)) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  forall(i = 1 : size(cart1)) dist(i) = distance_cart2D(cart1(i), cart2(i))
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  forall(i = 1 : size(cart1)) dist(i) = distance_cart2D(cart1(i))
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  end function distance_cart2D_v
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===================================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! distance_cart3D  : scalar version
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! distance_cart3D_v: vector version
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===================================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function distance_cart3D(cart1, cart2) result(dist)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian3D_t), intent(in) :: cart1
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian3D_t), intent(in), optional :: cart2
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(real_kind) :: dist
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(present(cart2)) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  dist = sqrt((cart1%x - cart2%x) * * 2 +
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  (cart1%y - cart2%y) * * 2 +
type    =  -2
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  (cart1%z - cart2%z) * * 2)
type    =  -2
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  dist = sqrt(cart1%x * cart1%x +
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart1%y * cart1%y +
type    =  -2
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart1%z * cart1%z)
type    =  -2
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  end function distance_cart3D
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function distance_cart3D_v(cart1, cart2) result(dist)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian3D_t), intent(in) :: cart1(:)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian3D_t), intent(in), optional :: cart2(:)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(real_kind) :: dist(size(cart1))
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  if(present(cart2)) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  forall(i = 1 : size(cart1)) dist(i) = distance_cart3D(cart1(i), cart2(i))
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 2]
ctype   =  5
cintent =  2
 
line    =  forall(i = 1 : size(cart1)) dist(i) = distance_cart3D(cart1(i))
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 6]
intents =  [0, 1, 1, 2, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  end function distance_cart3D_v
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===================================================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! spherical_to_cart:
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! converts spherical polar {lon,lat}  to 3D cartesian {x,y,z}
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! on unit sphere.  Note: spherical longitude is [0,2\pi]
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===================================================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function spherical_to_cart(sphere) result(cart)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(spherical_polar_t), intent(in) :: sphere
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian3D_t) :: cart
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  cart%x = sphere%r * cos(sphere%lat) * cos(sphere%lon)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%y = sphere%r * cos(sphere%lat) * sin(sphere%lon)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%z = sphere%r * sin(sphere%lat)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function spherical_to_cart
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===================================================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! spherical_to_cart_v:
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! converts spherical polar {lon,lat}  to 3D cartesian {x,y,z}
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! on unit sphere.  Note: spherical longitude is [0,2\pi]
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ===================================================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function spherical_to_cart_v(sphere) result(cart)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(spherical_polar_t), intent(in) :: sphere(:)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian3D_t) :: cart(size(sphere))
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  forall(i = 1 : size(sphere)) cart(i) = spherical_to_cart(sphere(i))
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function spherical_to_cart_v
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ==========================================================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! cart_to_spherical:
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! converts 3D cartesian {x,y,z} to spherical polar {lon,lat}
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! on unit sphere. Note: spherical longitude is [0,2\pi]
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! ==========================================================================
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! scalar version
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function cart_to_spherical(cart) result(sphere)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use PhysicalConstants, only : dd_pi
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian3D_t), intent(in) :: cart
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(spherical_polar_t) :: sphere
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  sphere%r = distance(cart)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere%lat = asin(cart%z / sphere%r)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere%lon = 0
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! ==========================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! enforce three facts:
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! 1) lon at poles is defined to be zero
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! 2) Grid points must be separated by about .01 Meter (on earth)
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !    from pole to be considered "not the pole".
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! 3) range of lon is { 0<= lon < 2*pi }
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! ==========================================================
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !   if point is away from the POLE.  distance(cart) = distance from center of earth,
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !   so this was a bug:
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  !    if (distance(cart) >= DIST_THRESHOLD) then
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  if(abs(abs(sphere%lat) - DD_PI / 2) > = DIST_THRESHOLD) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  sphere%lon = ATAN2(cart%y, cart%x)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  if(sphere%lon < 0) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6]
ctype   =  5
cintent =  6
 
line    =  sphere%lon = sphere%lon + 2 * DD_PI
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 6, 8]
ctype   =  6
cintent =  8
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function cart_to_spherical
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function aray_to_spherical(coordinates) result(sphere)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  real(kind = real_kind), intent(in) :: coordinates(3)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(spherical_polar_t) :: sphere
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian3D_t) :: cart
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  cart%x = coordinates(1)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%y = coordinates(2)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%z = coordinates(3)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere = cart_to_spherical(cart)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function aray_to_spherical
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function cart_to_spherical_v(cart) result(sphere)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use PhysicalConstants, only : dd_pi
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian3D_t), intent(in) :: cart(:)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(spherical_polar_t) :: sphere(size(cart))
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: i
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  forall(i = 1 : size(cart)) sphere(i) = cart_to_spherical(cart(i))
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function cart_to_spherical_v
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  function unit_face_based_cube_to_unit_sphere(cart, face_no) result(sphere)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Note: Output spherical longitude is [-pi,pi]
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Project from a UNIT cube to a UNIT sphere.  ie, the lenght of the cube edge is 2.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 1 of the cube touches the sphere at longitude, latitude (0,0). The negative
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! x axis is negative longitude (ie. going west is negative), the positive x axis
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! is increasing longitude.  Face 1 maps the Face 1 to the lat,lon on the sphere:
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    [-1,1] x [-1,1] => [-\pi/4,\pi/4] x [-\pi/4, \pi/4]
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 2 continues with increasing longitude (ie to the east of Face 1).
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! The left edge of Face 2 (negative x) is the right edge of Face 1 (positive x)
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! The latitude is the same as Face 1, but the longitude increases:
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    [-1,1] x [-1,1] => [\pi/4, 3\pi/4] x [-\pi/4, \pi/4]
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 3 continues with increasing longitude (ie to the east of Face 2).
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 3 is like Face 1, but the x coordinates are reversed, ie. decreasing x
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! is increasing longitude:
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    [-1,1] x [-1,1]  =    [-1,0] x [-1,1] U  [0,1] x [-1,1] =>
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !            [3\pi/4,\pi] x [-\pi, -3\pi/4]
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 4 finally connects Face 3 to Face 1.  Like Face 2, but wtih opposite x
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    [-1,1] x [-1,1] => [-3\pi/4, -\pi/4] x [-\pi/4, \pi/4]
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 5 is along the bottom edges of Faces 1,2,3,and 4 so the latitude goes from
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! -\pi/4 to -\pi/2.  The tricky part is lining up the longitude.  The zero longitude
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! must line up with the center of Face 1. ATAN2(x,1) = 0 => x = 0.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! So the (0,1) point on Face 5 is the zero longitude on the sphere.  The top edge of
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 5 is the bottom edge of Face 1.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! ATAN(x,0) = \pi/2 => x = 1, so the right edge of Face 5 is the bottom of Face 2.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Continueing, the bottom edge of 5 is the bottom of 3.  Left of 5 is bottom of 4.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 6 is along the top edges of Faces 1,2,3 and 4 so the latitude goes from
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! \pi/4 to \pi/2.   The zero longitude must line up with the center of Face 1.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! This is just like Face 5, but the y axis is reversed.  So the bottom edge of Face 6
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! is the top edge of Face 1.  The right edge of Face 6 is the top of Face 2.  The
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! top of 6 the top of 3 and the left of 6 the top of 4.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use PhysicalConstants, only : dd_pi
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  !    use parallel_mod,       only : abortmp
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParallel, only : AbortPar
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian2d_t), intent(in) :: cart ! On face_no of a unit cube
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer, intent(in) :: face_no
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(spherical_polar_t) :: sphere
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer i, j
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: r!, l_inf
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! MNL: removing check that points are on the unit cube because we allow spherical grids to map beyond the extent of the cube (though we probably should still have an upper bound for how far past the edge the element lies...)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !    l_inf = MAX(ABS(cart%x), ABS(cart%y))
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !    if (1.01 < l_inf) then
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !      call abortmp('unit_face_based_cube_to_unit_sphere: Input not on unit cube.')
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !    end if
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  sphere%r = one
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  r = sqrt(one +(cart%x) * * 2 +(cart%y) * * 2)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  select case(face_no)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(1)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  sphere%lat = asin((cart%y) / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere%lon = ATAN2(cart%x, one)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(2)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  sphere%lat = asin((cart%y) / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere%lon = ATAN2(one, - cart%x)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(3)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  sphere%lat = asin((cart%y) / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere%lon = ATAN2(- cart%x, - one)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(4)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  sphere%lat = asin((cart%y) / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere%lon = ATAN2(- one, cart%x)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(5)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  if(abs(cart%y) > DIST_THRESHOLD .or. abs(cart%x) > DIST_THRESHOLD) then
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  5
cintent =  4
 
line    =  sphere%lon = ATAN2(cart%x, cart%y)
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  5
cintent =  4
 
line    =  sphere%lon = 0.0D0 ! longitude is meaningless at south pole set to 0.0
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 4]
ctype   =  5
cintent =  4
 
line    =  sphere%lat = asin(- one / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  case(6)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 4]
ctype   =  5
cintent =  4
 
line    =  if(abs(cart%y) > DIST_THRESHOLD .or. abs(cart%x) > DIST_THRESHOLD) then
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 4, 6]
ctype   =  5
cintent =  6
 
line    =  sphere%lon = ATAN2(cart%x, - cart%y)
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 4, 6]
ctype   =  5
cintent =  6
 
line    =  sphere%lon = 0.0D0 ! longitude is meaningless at north pole set to 0.0
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 6]
ctype   =  5
cintent =  6
 
line    =  sphere%lat = asin(one / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 6, 8]
ctype   =  6
cintent =  8
 
line    =  case default
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 6]
ctype   =  5
cintent =  6
 
line    =  !call abortmp('unit_face_based_cube_to_unit_sphere: Face number not 1 to 6.')
type    =  -3
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 6]
ctype   =  5
cintent =  6
 
line    =  call AbortPar(message = 'unit_face_based_cube_to_unit_sphere : Face number not 1 to 6.')
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 6, 8]
ctype   =  6
cintent =  8
 
line    =  end select
type    =  -1
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  if(sphere%lon < 0.0D0) then
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  sphere%lon = sphere%lon + two * DD_PI
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  end function unit_face_based_cube_to_unit_sphere
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  function cart2spherical(x, y, face_no) result(sphere)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! IMPORTANT: INPUT ARE the REAL cartesian from the cube sphere
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Note: Output spherical longitude is [-pi,pi]
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Project from a UNIT cube to a UNIT sphere.  ie, the lenght of the cube edge is 2.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 1 of the cube touches the sphere at longitude, latitude (0,0). The negative
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! x axis is negative longitude (ie. going west is negative), the positive x axis
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! is increasing longitude.  Face 1 maps the Face 1 to the lat,lon on the sphere:
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    [-1,1] x [-1,1] => [-\pi/4,\pi/4] x [-\pi/4, \pi/4]
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 2 continues with increasing longitude (ie to the east of Face 1).
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! The left edge of Face 2 (negative x) is the right edge of Face 1 (positive x)
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! The latitude is the same as Face 1, but the longitude increases:
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    [-1,1] x [-1,1] => [\pi/4, 3\pi/4] x [-\pi/4, \pi/4]
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 3 continues with increasing longitude (ie to the east of Face 2).
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 3 is like Face 1, but the x coordinates are reversed, ie. decreasing x
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! is increasing longitude:
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    [-1,1] x [-1,1]  =    [-1,0] x [-1,1] U  [0,1] x [-1,1] =>
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !            [3\pi/4,\pi] x [-\pi, -3\pi/4]
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 4 finally connects Face 3 to Face 1.  Like Face 2, but wtih opposite x
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  !    [-1,1] x [-1,1] => [-3\pi/4, -\pi/4] x [-\pi/4, \pi/4]
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 5 is along the bottom edges of Faces 1,2,3,and 4 so the latitude goes from
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! -\pi/4 to -\pi/2.  The tricky part is lining up the longitude.  The zero longitude
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! must line up with the center of Face 1. ATAN2(x,1) = 0 => x = 0.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! So the (0,1) point on Face 5 is the zero longitude on the sphere.  The top edge of
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 5 is the bottom edge of Face 1.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! ATAN(x,0) = \pi/2 => x = 1, so the right edge of Face 5 is the bottom of Face 2.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Continueing, the bottom edge of 5 is the bottom of 3.  Left of 5 is bottom of 4.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Face 6 is along the top edges of Faces 1,2,3 and 4 so the latitude goes from
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! \pi/4 to \pi/2.   The zero longitude must line up with the center of Face 1.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! This is just like Face 5, but the y axis is reversed.  So the bottom edge of Face 6
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! is the top edge of Face 1.  The right edge of Face 6 is the top of Face 2.  The
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! top of 6 the top of 3 and the left of 6 the top of 4.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use PhysicalConstants, only : dd_pi
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  !    use parallel_mod,       only : abortmp
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  use KiapsParallel, only : AbortPar
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  real(kind = real_kind), intent(in) :: x, y ! On face_no of a unit cube
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer, intent(in) :: face_no
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(spherical_polar_t) :: sphere
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer i, j
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: r!, l_inf
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! MNL: removing check that points are on the unit cube because we allow spherical grids to map beyond the extent of the cube (though we probably should still have an upper bound for how far past the edge the element lies...)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !    l_inf = MAX(ABS(cart%x), ABS(cart%y))
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !    if (1.01 < l_inf) then
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !      call abortmp('unit_face_based_cube_to_unit_sphere: Input not on unit cube.')
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !    end if
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  sphere%r = one
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  r = sqrt(one + x * * 2 + y * * 2)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  select case(face_no)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(1)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  sphere%lat = asin(y / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere%lon = ATAN2(x, one)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(2)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  sphere%lat = asin(y / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere%lon = ATAN2(one, - x)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(3)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  sphere%lat = asin(y / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere%lon = ATAN2(- x, - one)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(4)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  sphere%lat = asin(y / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere%lon = ATAN2(- one, x)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(5)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  if(abs(y) > DIST_THRESHOLD .or. abs(x) > DIST_THRESHOLD) then
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  5
cintent =  4
 
line    =  sphere%lon = ATAN2(x, y)
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  5
cintent =  4
 
line    =  sphere%lon = 0.0D0 ! longitude is meaningless at south pole set to 0.0
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 4]
ctype   =  5
cintent =  4
 
line    =  sphere%lat = asin(- one / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  case(6)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 4]
ctype   =  5
cintent =  4
 
line    =  if(abs(y) > DIST_THRESHOLD .or. abs(x) > DIST_THRESHOLD) then
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 4, 6]
ctype   =  5
cintent =  6
 
line    =  sphere%lon = ATAN2(x, - y)
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 4, 6]
ctype   =  5
cintent =  6
 
line    =  sphere%lon = 0.0D0 ! longitude is meaningless at north pole set to 0.0
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 6]
ctype   =  5
cintent =  6
 
line    =  sphere%lat = asin(one / r)
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 6, 8]
ctype   =  6
cintent =  8
 
line    =  case default
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 6]
ctype   =  5
cintent =  6
 
line    =  !call abortmp('unit_face_based_cube_to_unit_sphere: Face number not 1 to 6.')
type    =  -3
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 6]
ctype   =  5
cintent =  6
 
line    =  call AbortPar(message = 'unit_face_based_cube_to_unit_sphere : Face number not 1 to 6.')
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 6, 8]
ctype   =  6
cintent =  8
 
line    =  end select
type    =  -1
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  if(sphere%lon < 0.0D0) then
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  sphere%lon = sphere%lon + two * DD_PI
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end if
type    =  -1
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  end function cart2spherical
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  #if 0
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! Note: Output spherical longitude is [-pi,pi]
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  subroutine project(sphere, cart, face_no)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian2d_t), intent(in) :: cart(:, :) ! assumed to be cartesian coordinates of cube
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer, intent(in) :: face_no
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(spherical_polar_t), intent(out) :: sphere(:, :)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer npts, i, j
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  npts = size(cart, 1)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  do j = 1, npts
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  do i = 1, npts
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  5
cintent =  6
 
line    =  sphere(i, j) = unit_face_based_cube_to_unit_sphere(cart(i, j), face_no)
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  end do
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  5
cintent =  6
 
line    =  end do
type    =  -1
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end subroutine project
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  #endif
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! map a point in the referece element to the sphere
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  function ref2sphere_double(a, b, corners, face_no) result(sphere)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  real(kind = real_kind) :: a, b
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer, intent(in) :: face_no
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(spherical_polar_t) :: sphere
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2d_t) :: corners(4)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! local
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: pi, pj, qi, qj
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2d_t) :: cart
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! map (a,b) to the [-pi/2,pi/2] equi angular cube face:  x1,x2
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! a = gp%points(i)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! b = gp%points(j)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  pi =(1 - a) / 2
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pj =(1 - b) / 2
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  qi =(1 + a) / 2
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  qj =(1 + b) / 2
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%x = pi * pj * corners(1)%x
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + qi * pj * corners(2)%x
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + qi * qj * corners(3)%x
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + pi * qj * corners(4)%x
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%y = pi * pj * corners(1)%y
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + qi * pj * corners(2)%y
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + qi * qj * corners(3)%y
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + pi * qj * corners(4)%y
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! map from [pi/2,pi/2] equ angular cube face to sphere:
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere = projectpoint(cart, face_no)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function ref2sphere_double
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! map a point in the referece element to the sphere
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  function ref2sphere(a, b, corners, face_no) result(sphere)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  real(kind = longdouble_kind) :: a, b
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer, intent(in) :: face_no
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(spherical_polar_t) :: sphere
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2d_t) :: corners(4)
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! local
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: pi, pj, qi, qj
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2d_t) :: cart
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! map (a,b) to the [-pi/2,pi/2] equi angular cube face:  x1,x2
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! a = gp%points(i)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! b = gp%points(j)
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  pi =(1 - a) / 2
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pj =(1 - b) / 2
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  qi =(1 + a) / 2
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  qj =(1 + b) / 2
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%x = pi * pj * corners(1)%x
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + qi * pj * corners(2)%x
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + qi * qj * corners(3)%x
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + pi * qj * corners(4)%x
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%y = pi * pj * corners(1)%y
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + qi * pj * corners(2)%y
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + qi * qj * corners(3)%y
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  + pi * qj * corners(4)%y
type    =  -2
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! map from [pi/2,pi/2] equ angular cube face to sphere:
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere = projectpoint(cart, face_no)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function ref2sphere
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! Note: Output spherical longitude is [-pi,pi]
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  function projectpoint(cartin, face_no) result(sphere)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! Projection from a [-pi/4, \pi/4] sized cube.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! This will be checked because unit_face_based_cube_to_unit_sphere checks the ranges.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  ! See unit_face_based_cube_to_unit_sphere for documentation.
type    =  -3
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian2d_t), intent(in) :: cartin
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer, intent(in) :: face_no
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(spherical_polar_t) :: sphere
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2d_t) :: cart
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  !ASC  This is X and Y and not xhi eta ...
type    =  -3
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  cart%x = tan(cartin%x)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%y = tan(cartin%y)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sphere = unit_face_based_cube_to_unit_sphere(cart, face_no)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function projectpoint
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! takes a 2D point on a face of the cube of size [-\pi/4, \pi/4] and projects it
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! onto a 3D point on a cube of size [-1,1] in R^3
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  function cubedsphere2cart(cartin, face_no) result(cart)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian2d_t), intent(in) :: cartin ! assumed to be cartesian coordinates of cube
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer, intent(in) :: face_no
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian3D_t) :: cart
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  cart = spherical_to_cart(projectpoint(cartin, face_no))
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function cubedsphere2cart
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! onto a cube of size [-\pi/2,\pi/2] in R^3
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! the spherical longitude can be either in [0,2\pi] or [-\pi,\pi]
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function sphere2cubedsphere(sphere, face_no) result(cart)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  use PhysicalConstants, only : dd_pi
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(spherical_polar_t), intent(in) :: sphere
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer, intent(in) :: face_no
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2d_t) :: cart
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: xp, yp
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: lat, lon
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: pi, twopi, pi2, pi3, pi4
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  lat = sphere%lat
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  lon = sphere%lon
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pi = DD_PI
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  twopi = 2.0D0 * pi
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pi2 = pi * 0.5D0
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pi3 = pi * 1.5D0
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  pi4 = pi * 0.25D0
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  select case(face_no)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(1)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  xp = lon
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  if(pi < lon) xp = lon - twopi !if lon in [0, 2\pi]
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  yp = atan(tan(lat) / cos(xp))
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(2)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  xp = lon - pi2
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  yp = atan(tan(lat) / cos(xp))
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(3)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  xp = lon - pi
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  if(lon < 0) xp = lon + pi !if lon in [0, 2\pi]
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  yp = atan(tan(lat) / cos(xp))
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(4)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  xp = lon - pi3
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  if(lon < 0) xp = lon + pi2 !if lon in [0, 2\pi]
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  yp = atan(tan(lat) / cos(xp))
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(5)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  xp = atan(- sin(lon) / tan(lat))
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  yp = atan(- cos(lon) / tan(lat))
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(6)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  xp = atan(sin(lon) / tan(lat))
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  yp = atan(- cos(lon) / tan(lat))
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end select
type    =  -1
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  ! coordinates on the cube:
type    =  -3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  cart%x = xp
type    =  6
types   =  [0, 1, 2, 3, 6]
intents =  [0, 1, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%y = yp
type    =  6
types   =  [0, 1, 2, 3, 6]
intents =  [0, 1, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function sphere2cubedsphere
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! Go from an arbitrary sized cube in 3D
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! to a [-\pi/4,\pi/4] sized cube with (face,2d) coordinates.
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                        Z
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                        |
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                        |
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                        |
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                        |
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                        ---------------Y
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                       /
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                      /
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                     /
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                    /
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !                   X
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! NOTE: Face 1 =>  X positive constant face of cube
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !       Face 2 =>  Y positive constant face of cube
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !       Face 3 =>  X negative constant face of cube
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !       Face 4 =>  Y negative constant face of cube
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !       Face 5 =>  Z negative constant face of cube
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  !       Face 6 =>  Z positive constant face of cube
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function cart2cubedsphere(cart3D, face_no) result(cart)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian3D_t), intent(in) :: cart3d
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer, intent(in) :: face_no
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2d_t) :: cart
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: x, y
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  select case(face_no)
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(1)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  x = cart3D%y / cart3D%x
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  y = cart3D%z / cart3D%x
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(2)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  x = - cart3D%x / cart3D%y
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  y = cart3D%z / cart3D%y
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(3)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  x = cart3D%y / cart3D%x
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  y = - cart3D%z / cart3D%x
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(4)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  x = - cart3D%x / cart3D%y
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  y = - cart3D%z / cart3D%y
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(5)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  x = - cart3D%y / cart3D%z
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  y = - cart3D%x / cart3D%z
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(6)
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  x = cart3D%y / cart3D%z
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  y = - cart3D%x / cart3D%z
type    =  6
types   =  [0, 1, 2, 3, 5, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end select
type    =  -1
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  cart%x = atan(x)
type    =  6
types   =  [0, 1, 2, 3, 6]
intents =  [0, 1, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cart%y = atan(y)
type    =  6
types   =  [0, 1, 2, 3, 6]
intents =  [0, 1, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function cart2cubedsphere
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! This function divides three dimentional space up into
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! six sectors.  These sectors are then considered as the
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! faces of the cube.  It should work for any (x,y,z) coordinate
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  ! if on a sphere or on a cube.
type    =  -3
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  pure function cube_face_number_from_cart(cart) result(face_no)
type    =  2
types   =  [0, 1, 2]
intents =  [0, 1, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 1, 2, 3]
intents =  [0, 1, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(cartesian3D_t), intent(in) :: cart
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: face_no
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(real_kind) :: x, y, z
type    =  4
types   =  [0, 1, 2, 3, 4]
intents =  [0, 1, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  x = cart%x
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  y = cart%y
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  z = cart%z
type    =  6
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! Divide the X-Y plane into for quadrants of
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! [-\pi/2,\pi/2], [\pi/2,3\pi/2], .....
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! based on the lines X=Y and X=-Y.  This divides
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! 3D space up into four sections.  Doing the same
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! for the XZ and YZ planes divides space into six
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! sections.  Can also be thought of as conic sections
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! in the L_infinity norm.
type    =  -3
types   =  [0, 1, 2, 3, 4, 6]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  if(y < x .and. y > - x) then ! x > 0, Face 1, 5 or 6
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  if(z > x) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  5
cintent =  6
 
line    =  face_no = 6 ! north pole
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  else if(z < - x) then
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  5
cintent =  6
 
line    =  face_no = 5 ! south pole
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 4, 6, 5, 5]
intents =  [0, 1, 1, 2, 2, 4, 4, 6]
ctype   =  5
cintent =  6
 
line    =  face_no = 1
type    =  6
types   =  [0, 1, 2, 3, 4, 6, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 6, 5]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  5
cintent =  6
 
line    =  else if(y > x .and. y < - x) then ! x < 0
type    =  5
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  5
cintent =  4
 
line    =  if(z > - x) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 5]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  5
cintent =  6
 
line    =  face_no = 6 ! north pole
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  else if(z < x) then
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 5]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  5
cintent =  6
 
line    =  face_no = 5 ! south pole
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 4, 5, 5]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  5
cintent =  6
 
line    =  face_no = 3
type    =  6
types   =  [0, 1, 2, 3, 4, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 6, 8]
ctype   =  6
cintent =  8
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 4, 5]
intents =  [0, 1, 1, 2, 2, 6]
ctype   =  5
cintent =  6
 
line    =  else if(y > x .and. y > - x) then ! y > 0
type    =  5
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 2]
ctype   =  5
cintent =  2
 
line    =  if(z > y) then
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  5
cintent =  4
 
line    =  face_no = 6 ! north pole
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  else if(z < - y) then
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  5
cintent =  4
 
line    =  face_no = 5 ! south pole
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  else
type    =  5
types   =  [0, 1, 2, 3, 5, 5]
intents =  [0, 1, 1, 2, 2, 4]
ctype   =  5
cintent =  4
 
line    =  face_no = 2
type    =  6
types   =  [0, 1, 2, 3, 5, 5, 6]
intents =  [0, 1, 1, 2, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 3, 5]
intents =  [0, 1, 1, 2, 4]
ctype   =  5
cintent =  4
 
line    =  else if(y < x .and. y < - x) then ! y < 0
type    =  5
types   =  [0, 1, 2, 5]
intents =  [0, 1, 1, 2]
ctype   =  5
cintent =  2
 
line    =  if(z > - y) then
type    =  5
types   =  [0, 1, 2, 5, 5]
intents =  [0, 1, 1, 2, 4]
ctype   =  5
cintent =  4
 
line    =  face_no = 6 ! north pole
type    =  6
types   =  [0, 1, 2, 5, 5, 6]
intents =  [0, 1, 1, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  else if(z < y) then
type    =  5
types   =  [0, 1, 2, 5, 5]
intents =  [0, 1, 1, 2, 4]
ctype   =  5
cintent =  4
 
line    =  face_no = 5 ! south pole
type    =  6
types   =  [0, 1, 2, 5, 5, 6]
intents =  [0, 1, 1, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  else
type    =  5
types   =  [0, 1, 2, 5, 5]
intents =  [0, 1, 1, 2, 4]
ctype   =  5
cintent =  4
 
line    =  face_no = 4
type    =  6
types   =  [0, 1, 2, 5, 5, 6]
intents =  [0, 1, 1, 2, 4, 6]
ctype   =  6
cintent =  6
 
line    =  endif
type    =  -1
types   =  [0, 1, 2, 5]
intents =  [0, 1, 1, 4]
ctype   =  5
cintent =  4
 
line    =  else
type    =  5
types   =  [0, 1, 5]
intents =  [0, 1, 1]
ctype   =  5
cintent =  1
 
line    =  ! abs(y) = abs(x).  point is on cube edge, or on face 5 or 6:
type    =  -3
types   =  [0, 1, 5]
intents =  [0, 1, 1]
ctype   =  5
cintent =  1
 
line    =  if(abs(x) < z) then
type    =  5
types   =  [0, 1, 5, 5]
intents =  [0, 1, 1, 3]
ctype   =  5
cintent =  3
 
line    =  face_no = 6 ! north pole
type    =  6
types   =  [0, 1, 5, 5, 6]
intents =  [0, 1, 1, 3, 5]
ctype   =  6
cintent =  5
 
line    =  else if(z < - abs(x)) then
type    =  5
types   =  [0, 1, 5, 5]
intents =  [0, 1, 1, 3]
ctype   =  5
cintent =  3
 
line    =  face_no = 5 ! south pole
type    =  6
types   =  [0, 1, 5, 5, 6]
intents =  [0, 1, 1, 3, 5]
ctype   =  6
cintent =  5
 
line    =  else if(0 < x .and. 0 < y) then
type    =  5
types   =  [0, 1, 5, 5]
intents =  [0, 1, 1, 3]
ctype   =  5
cintent =  3
 
line    =  face_no = 1
type    =  6
types   =  [0, 1, 5, 5, 6]
intents =  [0, 1, 1, 3, 5]
ctype   =  6
cintent =  5
 
line    =  else if(x < 0 .and. 0 < y) then
type    =  5
types   =  [0, 1, 5, 5]
intents =  [0, 1, 1, 3]
ctype   =  5
cintent =  3
 
line    =  face_no = 2
type    =  6
types   =  [0, 1, 5, 5, 6]
intents =  [0, 1, 1, 3, 5]
ctype   =  6
cintent =  5
 
line    =  else if(x < 0 .and. y < 0) then
type    =  5
types   =  [0, 1, 5, 5]
intents =  [0, 1, 1, 3]
ctype   =  5
cintent =  3
 
line    =  face_no = 3
type    =  6
types   =  [0, 1, 5, 5, 6]
intents =  [0, 1, 1, 3, 5]
ctype   =  6
cintent =  5
 
line    =  else
type    =  5
types   =  [0, 1, 5, 5]
intents =  [0, 1, 1, 3]
ctype   =  5
cintent =  3
 
line    =  face_no = 4
type    =  6
types   =  [0, 1, 5, 5, 6]
intents =  [0, 1, 1, 3, 5]
ctype   =  6
cintent =  5
 
line    =  endif
type    =  -1
types   =  [0, 1, 5]
intents =  [0, 1, 3]
ctype   =  5
cintent =  3
 
line    =  endif
type    =  -1
types   =  [0, 1]
intents =  [0, 1]
ctype   =  1
cintent =  1
 
line    =  end function cube_face_number_from_cart
type    =  -1
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  ! This could be done directly by using the lon, lat coordinates,
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  ! but call cube_face_number_from_cart just so that there is one place
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  ! to do the conversions and they are all consistant.
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  pure function cube_face_number_from_sphere(sphere) result(face_no)
type    =  2
types   =  [0, 2]
intents =  [0, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 2, 3]
intents =  [0, 1, 2]
ctype   =  3
cintent =  2
 
line    =  type(spherical_polar_t), intent(in) :: sphere
type    =  4
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian3d_t) :: cart
type    =  4
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  integer :: face_no
type    =  4
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  cart = spherical_to_cart(sphere)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  face_no = cube_face_number_from_cart(cart)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function cube_face_number_from_sphere
type    =  -1
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  ! CE, need real (cartesian) xy coordinates on the cubed sphere
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  subroutine cart2cubedspherexy(cart3d, face_no, cartxy)
type    =  2
types   =  [0, 2]
intents =  [0, 1]
ctype   =  2
cintent =  1
 
line    =  type(cartesian3D_t), intent(in) :: cart3d
type    =  4
types   =  [0, 2, 4]
intents =  [0, 1, 2]
ctype   =  4
cintent =  2
 
line    =  integer, intent(in) :: face_no
type    =  4
types   =  [0, 2, 4]
intents =  [0, 1, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian2d_t), intent(out) :: cartxy
type    =  4
types   =  [0, 2, 4]
intents =  [0, 1, 2]
ctype   =  4
cintent =  2
 
line    =  ! a (half length of a cube side) is supposed to be 1
type    =  -3
types   =  [0, 2, 4]
intents =  [0, 1, 2]
ctype   =  4
cintent =  2
 
line    =  select case(face_no)
type    =  6
types   =  [0, 2, 4, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(1)
type    =  5
types   =  [0, 2, 5]
intents =  [0, 1, 2]
ctype   =  5
cintent =  2
 
line    =  cartxy%x = cart3D%y / cart3D%x
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cartxy%y = cart3D%z / cart3D%x
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(2)
type    =  5
types   =  [0, 2, 5]
intents =  [0, 1, 2]
ctype   =  5
cintent =  2
 
line    =  cartxy%x = - cart3D%x / cart3D%y
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cartxy%y = cart3D%z / cart3D%y
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(3)
type    =  5
types   =  [0, 2, 5]
intents =  [0, 1, 2]
ctype   =  5
cintent =  2
 
line    =  cartxy%x = cart3D%y / cart3D%x
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cartxy%y = - cart3D%z / cart3D%x
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(4)
type    =  5
types   =  [0, 2, 5]
intents =  [0, 1, 2]
ctype   =  5
cintent =  2
 
line    =  cartxy%x = - cart3D%x / cart3D%y
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cartxy%y = - cart3D%z / cart3D%y
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(5) !bottom face
type    =  5
types   =  [0, 2, 5]
intents =  [0, 1, 2]
ctype   =  5
cintent =  2
 
line    =  cartxy%x = - cart3D%y / cart3D%z
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cartxy%y = - cart3D%x / cart3D%z
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  case(6) !top face
type    =  5
types   =  [0, 2, 5]
intents =  [0, 1, 2]
ctype   =  5
cintent =  2
 
line    =  cartxy%x = cart3D%y / cart3D%z
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cartxy%y = - cart3D%x / cart3D%z
type    =  6
types   =  [0, 2, 5, 6]
intents =  [0, 1, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end select
type    =  -1
types   =  [0, 2]
intents =  [0, 1]
ctype   =  2
cintent =  1
 
line    =  end subroutine cart2cubedspherexy
type    =  -1
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  ! CE END
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  subroutine sphere_tri_area(v1, v2, v3, area)
type    =  2
types   =  [0, 2]
intents =  [0, 1]
ctype   =  2
cintent =  1
 
line    =  !  input: v1(3),v2(3),v3(3)  cartesian coordinates of triangle
type    =  -3
types   =  [0, 2]
intents =  [0, 1]
ctype   =  2
cintent =  1
 
line    =  !  output: area
type    =  -3
types   =  [0, 2]
intents =  [0, 1]
ctype   =  2
cintent =  1
 
line    =  !  based on formulas in STRI_QUAD:
type    =  -3
types   =  [0, 2]
intents =  [0, 1]
ctype   =  2
cintent =  1
 
line    =  !  http://people.sc.fsu.edu/~burkardt/f_src/stri_quad/stri_quad.html
type    =  -3
types   =  [0, 2]
intents =  [0, 1]
ctype   =  2
cintent =  1
 
line    =  use PhysicalConstants, only : dd_pi
type    =  3
types   =  [0, 2, 3]
intents =  [0, 1, 2]
ctype   =  3
cintent =  2
 
line    =  implicit none
type    =  3
types   =  [0, 2, 3]
intents =  [0, 1, 2]
ctype   =  3
cintent =  2
 
line    =  real(kind = real_kind) area
type    =  4
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) a, b, c, al, bl, cl, sina, sinb, sinc, sins, a1, b1, c1
type    =  4
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  type(cartesian3D_t) v1, v2, v3
type    =  4
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! compute great circle lengths
type    =  -3
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  al = acos(v2%x * v3%x + v2%y * v3%y + v2%z * v3%z)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  bl = acos(v3%x * v1%x + v3%y * v1%y + v3%z * v1%z)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  cl = acos(v1%x * v2%x + v1%y * v2%y + v1%z * v2%z)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! compute angles
type    =  -3
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sina = sin((bl + cl - al) / 2) ! sin(sl - al)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sinb = sin((al + cl - bl) / 2) ! sin(sl - bl)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sinc = sin((al + bl - cl) / 2)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  sins = sin((al + bl + cl) / 2)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #if 0
type    =  -3
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  a = 2 * atan2(sqrt(sinb * sinc), sqrt(sins * sina))
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  b = 2 * atan2(sqrt(sina * sinc), sqrt(sins * sinb))
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  c = 2 * atan2(sqrt(sina * sinb), sqrt(sins * sinc))
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! apply Girard's theorem
type    =  -3
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  area = a + b + c - dd_pi
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  #endif
type    =  -3
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! for small areas, formula above looses precision.
type    =  -3
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! 2atan(x) + 2atan(1/x) = pi
type    =  -3
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! 2atan(x) - pi = -2atan(1/x)
type    =  -3
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  a = sqrt((sinb * sinc) /(sins * sina))
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  b = sqrt((sina * sinc) /(sins * sinb))
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  c = sqrt((sina * sinb) /(sins * sinc))
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  a1 = 2 * atan(a)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  b1 = 2 * atan(b)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  c1 = 2 * atan(c)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  if(a.gt.b.and.a.gt.c) then
type    =  5
types   =  [0, 2, 3, 4, 6, 5]
intents =  [0, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  a1 = - 2 * atan(1 / a)
type    =  6
types   =  [0, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  else if(b.gt.c) then
type    =  5
types   =  [0, 2, 3, 4, 6, 5]
intents =  [0, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  b1 = - 2 * atan(1 / b)
type    =  6
types   =  [0, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  else
type    =  5
types   =  [0, 2, 3, 4, 6, 5]
intents =  [0, 1, 2, 2, 4, 4]
ctype   =  5
cintent =  4
 
line    =  c1 = - 2 * atan(1 / c)
type    =  6
types   =  [0, 2, 3, 4, 6, 5, 6]
intents =  [0, 1, 2, 2, 4, 4, 6]
ctype   =  6
cintent =  6
 
line    =  endif
type    =  -1
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  ! apply Girard's theorem
type    =  -3
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  area = a1 + b1 + c1
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end subroutine sphere_tri_area
type    =  -1
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !CE, 5.May 2011
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !INPUT: Points in xy cubed sphere coordinates, counterclockwise
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  !OUTPUT: corresponding area on the sphere
type    =  -3
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
line    =  function surfareaxy(x1, x2, y1, y2) result(area)
type    =  2
types   =  [0, 2]
intents =  [0, 1]
ctype   =  2
cintent =  1
 
line    =  implicit none
type    =  3
types   =  [0, 2, 3]
intents =  [0, 1, 2]
ctype   =  3
cintent =  2
 
line    =  real(kind = real_kind), intent(in) :: x1, x2, y1, y2
type    =  4
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: area
type    =  4
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  real(kind = real_kind) :: a1, a2, a3, a4
type    =  4
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! cubed-sphere cell area, from Lauritzen & Nair MWR 2008
type    =  -3
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! central angles:
type    =  -3
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! cube face: -pi/4,-pi/4 -> pi/4,pi/4
type    =  -3
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! this formula gives 2   so normalize by 4pi/6 / 2 = pi/3
type    =  -3
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  ! use implementation where the nodes a counterclockwise (not as in the paper)
type    =  -3
types   =  [0, 2, 3, 4]
intents =  [0, 1, 2, 2]
ctype   =  4
cintent =  2
 
line    =  a1 = acos(- sin(atan(x1)) * sin(atan(y1)))
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  a2 = - acos(- sin(atan(x2)) * sin(atan(y1)))
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  a3 = acos(- sin(atan(x2)) * sin(atan(y2)))
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  a4 = - acos(- sin(atan(x1)) * sin(atan(y2)))
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  area =(a1 + a2 + a3 + a4)
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  return
type    =  6
types   =  [0, 2, 3, 4, 6]
intents =  [0, 1, 2, 2, 4]
ctype   =  6
cintent =  4
 
line    =  end function surfareaxy
type    =  -1
types   =  [0]
intents =  [0]
ctype   =  0
cintent =  0
 
